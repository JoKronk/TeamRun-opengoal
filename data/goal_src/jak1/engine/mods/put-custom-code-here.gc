    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: put-custom-code-here.gc
    ;; name in dgo: put-custom-code-here
    ;; dgos: TODO


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is this file for.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| This file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb |#


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Begin function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    (defun write-mod-states ((obj mod-states) (filename string))
    
      (if (not filename)
        (return #f))

      (let ((file (new 'stack 'file-stream filename 'write)))
        (if (not (file-stream-valid? file))
          (return #f))

        (format file "{~%")
        (format file "  \"currentLevel\": \"~A\",~%" (-> obj current-level))
        (format file "  \"onZoomer\": ~S~%" (if (-> obj on-zoomer?)
          "true"
          "false"
        ))
        (format file "}~%")
        (file-stream-close file)
        )

      (format 0 "mod state file write: ~A~%" filename)

      #t
    )


    (defun write-tasks-status ((filename string))
    
      (if (not filename)
        (return #f))

      (let ((file (new 'stack 'file-stream filename 'write)))
        (if (not (file-stream-valid? file))
          (return #f))

        (format file "{~%")
        (format file "  \"jungle-lurkerm\": ~A,~%" (enum->string task-status (get-task-status (game-task jungle-lurkerm))))
        (format file "  \"village1-yakow\": ~A,~%" (enum->string task-status (get-task-status (game-task village1-yakow))))
        (format file "  \"misty-muse\": ~A,~%" (enum->string task-status (get-task-status (game-task misty-muse))))
        (format file "  \"rolling-race\": ~A,~%" (enum->string task-status (get-task-status (game-task rolling-race))))
        (format file "  \"rolling-moles\": ~A,~%" (enum->string task-status (get-task-status (game-task rolling-moles))))
        (format file "  \"village2-levitator\": ~A,~%" (enum->string task-status (get-task-status (game-task village2-levitator))))
        (format file "  \"village3-button\": ~A,~%" (enum->string task-status (get-task-status (game-task village3-button))))
        (format file "  \"lavatube-balls\": ~A,~%" (enum->string task-status (get-task-status (game-task lavatube-balls))))
        (format file "  \"village4-button\": ~A,~%" (enum->string task-status (get-task-status (game-task village4-button))))
        (format file "  \"plunger-lurker-hit\": ~A~%" (enum->string task-status (get-task-status (game-task plunger-lurker-hit))))
        (format file "}~%")
        (file-stream-close file)
        )

      (format 0 "task status file write: ~A~%" filename)

      #t
    )
    (defun commit-mod-state ()
      (pc-mkdir-file-path "data/mod-states.json")
      (write-mod-states *mod-states* "mod-states.json")
      (none)
    )
    (defun commit-task-status ()
      (pc-mkdir-file-path "data/task-status.json")
      (write-tasks-status "task-status.json")
      (none)
    )

    (defun runs-every-frame ()
      ;;(increase-power-cell-by-one) This is a call to increase-power-cell-by-one defined in define-custom-functions-here.gc

    (none)
    )

    (defun check-allow-cell-pickup? ()
      *allow-cell-pickup?*
    )

    (defun runs-on-level-enter ((level symbol))
      (set! (-> *mod-states* current-level) (the-as string level))
      (commit-mod-state)
    (none)
    )
    

    (defun set-zoomer-wait-mode ()
      (set! (-> *racer-mods* target-speed) 33840.0)
      (set! (-> *racer-air-mods* target-speed) 33840.0)
    )
    (defun set-zoomer-full-mode ()
      (set! (-> *racer-mods* target-speed) 163840.0)
      (set! (-> *racer-air-mods* target-speed) 163840.0)
    )
    
    (defun runs-on-zoomer-entry ()
      (set! (-> *mod-states* on-zoomer?) #t)
      (commit-mod-state)
    (none)
    )

    (defun runs-on-zoomer-exit ()
      (set! (-> *mod-states* on-zoomer?) #f)
      (commit-mod-state)
    )

    (defun runs-on-shared-task-update ((task game-task))
      (commit-task-status)
      (none)
    )

    (defun runs-on-warp-gate-open ((task game-task))
      (if (or (= (get-task-status task) (task-status invalid)) (= (get-task-status task) (task-status need-reminder-a)))
        (commit-task-status)
      )
      (none)
    )

    (defun runs-on-orb-pickup ((parent process-tree))
      (let* ((from-cache? (and parent (type-type? (-> parent type) orb-cache-top))))
        ;; Code here runs on ANY orb pickup

        (when from-cache?
          ;; Code here runs only if the orb was from an orb cache

          )

        (when (not from-cache?)
          ;; Code here runs only if the orb was NOT from an orb cache

          )
        )
      (none)
      )

    (defun runs-on-fly-pickup ()
      ;; Code here runs on any scout fly pickup

      (none)
      )

    (defun runs-on-cell-pickup ((cell-event symbol))
      (case cell-event
        (('pickup)      
          ;; Code here runs as soon as you pickup a powercell

          )
        (('cutscene-end)      
          ;; Code here runs at the end of any powercell cutscene

          )
        )

      (none)
      )

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? (and parent (type-type? (-> parent type) vent))))
        ;; Code here runs as soon as you pickup ANY eco
        
        (case eco-type
          (((pickup-type eco-yellow))      
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))      
            ;; Code here runs as soon as you pickup red eco

            )
          (((pickup-type eco-blue))      
            ;; Code here runs as soon as you pickup blue eco

            )
          (((pickup-type eco-pill))      
            ;; Code here runs as soon as you pickup small green eco

            )
          (((pickup-type eco-green))      
            ;; Code here runs as soon as you pickup big green eco 

            )
          )
        
        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )

    (defun runs-on-jak-spawn ()
      (set! (-> *mod-states* on-zoomer?) #f)
      (commit-mod-state)
      ;; Code here runs every time jak spawns (loading a file new game or death)   

      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
          
          )
        (('blackout)
          ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns

          )
        )
      
      (none)
      )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#
